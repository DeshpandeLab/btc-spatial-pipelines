/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    btc/spatial Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/



// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input                      = null
    fasta                      = null

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true


    bayestme_spatial_smoothing_parameter = 1.0
    bayestme_seed = null
    // Whether to use MCMC (slower) or SVI (faster) inference
    bayestme_inference_type = "SVI"

    // If false, we will skip running the spatial expression model
    bayestme_run_spatial_expression = true

    // Input directory with spaceranger data
    bayestme_expression_truth_files = []

    // Gene filtering params
    bayestme_filter_ribosomal_genes = false
    bayestme_n_top_by_standard_deviation = 1000
    bayestme_spot_threshold = 0.9

    // Bleeding correction params
    bayestme_bleed_correction_n_top_genes = 50
    bayestme_bleed_correction_n_em_steps = 5
    bayestme_bleed_correction_local_weight = null

    // Flags for both phenotype selection and deconvolution
    bayestme_background_noise = false
    bayestme_lda_initialization = false

    // Phenotype selection params

    // Number of times to run k-fold cross-validation.
    bayestme_phenotype_selection_n_fold = 5
    // Split dataset into k consecutive folds for each instance of k-fold cross-validation
    bayestme_phenotype_selection_n_splits = 15
    // Number of samples from the posterior distribution.
    bayestme_phenotype_selection_n_samples = 100
    // Number of burn-in samples.
    bayestme_phenotype_selection_n_burn = 2000
    // Thinning factor for sampling
    bayestme_phenotype_selection_n_thin = 5
    // If using SVI inference, whether to use spatial guide or not
    bayestme_phenotype_selection_use_spatial_guide = true
    // Minimum number of cell types to try.
    bayestme_phenotype_selection_n_components_min = 2
    // Maximum number of cell types to try.
    bayestme_phenotype_selection_n_components_max = 12
    // Potential values of the spatial smoothing parameter to try.
    // This will be set by default depending on the value of inference_type,
    // but can be overridden in advanced usage.
    bayestme_phenotype_selection_spatial_smoothing_values = null

    // Deconvolution params

    // Number of samples from the posterior distribution.
    bayestme_deconvolution_n_samples = 100
    // Number of burn-in samples.
    bayestme_deconvolution_n_burn = 2000
    // Thinning factor for sampling
    bayestme_deconvolution_n_thin = 5
    // List of cell type names to use for plots.
    bayestme_deconvolution_cell_type_names = []
    // If using SVI inference, whether to use spatial guide or not
    bayestme_deconvolution_use_spatial_guide = true

    // Select Marker Genes Params
    bayestme_n_marker_genes = 5
    bayestme_marker_gene_alpha_cutoff = 0.05
    // Method for choosing marker genes. Options are: "TIGHT" or "FALSE_DISCOVERY_RATE"
    bayestme_marker_gene_method = "TIGHT"

    // Spatial Expression Params

    bayestme_spatial_expression_n_spatial_patterns = 5
    // Number of samples from the posterior distribution.
    bayestme_spatial_expression_n_samples = 100
    // Number of burn-in samples.
    bayestme_spatial_expression_n_burn = 2000
    // Thinning factor for sampling
    bayestme_spatial_expression_n_thin = 5
    // Simpler model for sampling spatial differential expression posterior
    bayestme_use_simple_spatial_expression_model = false
    // Alpha0 tuning parameter.
    bayestme_spatial_expression_alpha0 = 10
    // Prior var tuning parameter.
    bayestme_spatial_expression_prior_var = 100
    // Only consider spots where there are at least <n_cell_min> cells of a given type,
    // as determined by the deconvolution results.
    bayestme_spatial_expression_n_cell_min = 5
    // Number of genes to consider for spatial expression.
    bayestme_spatial_expression_n_genes = 100

    // Parameters controlling the selection of significant spatial patterns
    bayestme_significant_spatial_pattern_moran_i_score_threshold = 0.9
    bayestme_significant_spatial_pattern_tissue_threshold = 5
    bayestme_significant_spatial_pattern_gene_spatial_pattern_proportion_threshold = 0.95
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'docker.io'
docker.registry      = 'docker.io'
podman.registry      = 'docker.io'
singularity.registry = 'docker.io'

// Nextflow plugins
plugins {
    id 'nf-validation' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'btc/spatial'
    author          = """"""
    homePage        = 'https://github.com/btc/spatial'
    description     = """BTC spatial pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
